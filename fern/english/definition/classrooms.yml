# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  root: __package__.yml

service:
  auth: false
  base-path: ""
  endpoints:
    get:
      path: /classrooms
      method: GET
      auth: true
      docs: Returns the classroom details for a class code.
      display-name: Get Classroom Details
      request:
        name: ClassroomsGetRequest
        query-parameters:
          code:
            docs: The classroom's `code`.
            type: string
          retMemberLimit:
            docs: limit the return number of members for the classroom
            type: optional<double>
      response:
        docs: The classroom details.
        type: root.ClassroomResponseWithCode
      errors: []

    create:
      path: /classrooms
      method: POST
      auth: true
      docs: Creates a new empty `Classroom`.
      display-name: Create a classroom
      request:
        name: ClassroomsCreateRequest
        body:
          properties:
            name:
              type: string
              docs: Name of the classroom
            ownerID:
              type: root.objectIdString
            aceConfig:
              type: root.ClassroomsCreateRequestAceConfig
      response:
        docs: The created classroom
        type: root.ClassroomResponseWithCode
      errors: []

    upsertMember:
      path: /classrooms/{handle}/members
      method: PUT
      auth: true
      docs: Upserts a user into the classroom.
      path-parameters:
        handle:
          docs: The document's `_id` or `slug`.
          type: string
      display-name: Upsert a user from classroom
      request:
        name: ClassroomsUpsertMemberRequest
        body:
          properties:
            code:
              type: string
              docs: The code for joining this classroom
            userId:
              type: string
              docs: The `_id` or `slug` of the user to add to the class.
            retMemberLimit:
              docs: >-
                limit the return number of members for the classroom, the
                default value is 1000
              type: optional<double>
      response:
        docs: The classroom with the member added.
        type: root.ClassroomResponse
      errors: []

    removeMember:
      path: /classrooms/{handle}/members
      method: DELETE
      auth: true
      docs: Remove a user from the classroom.
      path-parameters:
        handle:
          docs: The document's `_id` or `slug`.
          type: string
      display-name: Delete User from Classroom
      request:
        name: ClassroomsRemoveMemberRequest
        body:
          properties:
            userId:
              type: string
              docs: The `_id` or `slug` of the user to remove from the class.
            retMemberLimit:
              docs: >-
                limit the return number of members for the classroom, the
                default value is 1000
              type: optional<double>
      response:
        docs: The classroom with the member removed.
        type: root.ClassroomResponse
      errors: []

    enrollUserInCourse:
      path: /classrooms/{classroomHandle}/courses/{courseHandle}/enrolled
      method: PUT
      auth: true
      docs: |
        Enrolls a user in a course in a classroom.
        If the course is paid, user must have an active license.
        User must be a member of the classroom.
      path-parameters:
        classroomHandle:
          docs: The classroom's `_id`.
          type: string
        courseHandle:
          docs: The course's `_id`.
          type: string
      display-name: Enroll User in a Course
      request:
        name: ClassroomsEnrollUserInCourseRequest
        query-parameters:
          retMemberLimit:
            docs: >-
              limit the return number of members for the classroom, the default
              value is 1000
            type: optional<double>
        body:
          properties:
            userId:
              type: root.objectIdString
      response:
        docs: The classroom with the user enrolled.
        type: root.ClassroomResponse
      errors: []

    removeEnrolledUser:
      path: /classrooms/{classroomHandle}/courses/{courseHandle}/remove-enrolled
      method: PUT
      auth: true
      docs: |
        Removes an enrolled user from a course in a classroom.
      path-parameters:
        classroomHandle:
          docs: The classroom's `_id`.
          type: string
        courseHandle:
          docs: The course's `_id`.
          type: string
      display-name: Remove User from a classroom
      request:
        name: ClassroomsRemoveEnrolledUserRequest
        query-parameters:
          retMemberLimit:
            docs: >-
              limit the return number of members for the classroom, the default
              value is 1000
            type: optional<double>
        body:
          properties:
            userId:
              type: root.objectIdString
      response:
        docs: The classroom with the user removed from the course.
        type: root.ClassroomResponse
      errors: []

    getMembersStats:
      path: /classrooms/{classroomHandle}/stats
      method: GET
      auth: true
      docs: |
        Returns a list of all members stats for the classroom.
      path-parameters:
        classroomHandle:
          docs: The classroom's `_id`.
          type: string
      display-name: Get Member Stats
      request:
        name: ClassroomsGetMembersStatsRequest
        query-parameters:
          project:
            docs: >
              If specified, include only the specified projection of returned
              stats; else, return all stats. Format as a comma-separated list,
              like `creator,playtime,state.complete`.
            type: optional<string>
          memberLimit:
            docs: >-
              Limit the return member number. the default value is 10, and the
              max value is 100
            type: optional<double>
          memberSkip:
            docs: |
              Skip the members that doesn't need to return, for pagination
            type: optional<double>
      response:
        docs: The members stats for the classroom.
        type: list<root.ClassroomsGetMembersStatsResponseItem>
      errors: []

    getLevelsPlayed:
      path: /classrooms/{classroomHandle}/members/{memberHandle}/sessions
      method: GET
      auth: true
      docs: |
        Returns a list of all levels played by the user for the classroom.
      path-parameters:
        classroomHandle:
          docs: The classroom's `_id`.
          type: string
        memberHandle:
          docs: The classroom member's `_id`.
          type: string
      display-name: Get Level Session
      response:
        docs: The classroom with the user enrolled.
        type: list<root.LevelSessionResponse>
      errors: []
